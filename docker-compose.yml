
services:
  app:
    image: "node:18-alpine"
    container_name: nestjs-server
    build:
      context: .
      dockerfile: Dockerfile
    user: "node"
    working_dir: /app
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=concert_service_db
      - REDIS_HOST=redis
      - REDIS_port=6379
    volumes:
      - .:/app
    # ports:
      # - "3001:3000"
    ports:
      - "3000:3000"
    tty: true
    command: sh -c "npm run migrate:up && npx nodemon"
    depends_on:
      - redis 
      - postgres
      # - kafka
    networks:
      - app-network 
  
  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - ./data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres-server
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: concert_service_db
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # zookeeper:
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:latest
  #   ports:
  #     - "9900:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - app-network

  # kafka:
  #   container_name: kafka
  #   image: confluentinc/cp-kafka:latest
  #   # depends_on:
  #   #   - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "true"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CREATE_TOPICS: "my-topic"
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Auto-create topics
  #     KAFKA_STARTUP_DELAY_MS: 5000 # 브로커 시작 지연
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   #   - ./kafka/kafka-init.sh:/usr/bin/kafka-init.sh
  #   # command: ["bash", "-c", "start-kafka.sh & /usr/bin/kafka-init.sh"]
  #   networks:
  #     - app-network

  # kafka:
  #   image: bitnami/kafka:3.7
  #   ports:
  #     - '9094:9094'
  #   environment:
  #     # KRaft 설정
  #     KAFKA_KRAFT_CLUSTER_ID: z6sXmGHyR1qVTyyl9XXr0g
  #     KAFKA_CFG_PROCESS_ROLES: controller,broker
  #     KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093
  #     KAFKA_CFG_NODE_ID: 0

  #     # 리스너 설정
  #     KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
  #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092,EXTERNAL://localhost:9094
  #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  #     # 클러스터 설정
  #     KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
  #     KAFKA_CFG_MIN_INSYNC_REPLICAS: 1
  #     KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #   volumes:
  #     - kafka-volume-0:/bitnami
  #   networks:
  #     - app-network
  
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - '9091:8080'
  #   depends_on:
  #     - kafka
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=KRaft Cluster
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-0:9092
  #     - DYNAMIC_CONFIG_ENABLED=true
  #   networks:
  #     - app-network

volumes:
  kafka-volume-0:
    driver: local

networks:
  app-network:
    driver: bridge

